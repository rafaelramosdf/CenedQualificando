@namespace CenedQualificando.Web.Admin.Shared.Components.Select

@using CenedQualificando.Domain.Models.Utils
@using CenedQualificando.Domain.Models.Dtos

@inject CenedQualificando.Web.Admin.Services.RefitApiServices.IComboEntidadeApiService Service
@inject CenedQualificando.Web.Admin.Services.RefitApiServices.IAlunoApiService AlunoApiService

<MudAutocomplete T="int" Label="Aluno / Cursista"
                 Value="@Value"
                 SearchFunc="@Search"
                 ValueChanged="@OnValueChanged"
                 ResetValueOnEmptyText="true" CoerceText="true"
                 ToStringFunc="@ToStringFunc"
                 Placeholder="Digite o Nome ou CPF do Aluno"
                 MinCharacters="3"
                 MaxItems="20" />

@code
{
    [Parameter]
    public int Id
    {
        get => Value;
        set
        {
            Value = value;
        }
    }

    [Parameter] public EventCallback<int> IdChanged { get; set; }

    [Parameter] public EventCallback<AlunoDto> OnSelected { get; set; }

    private IEnumerable<SelectResult> Items { get; set; }

    private string ToStringFunc(int id) => Items.FirstOrDefault(x => x.Id == id)?.Text;

    private async Task<IEnumerable<int>> Search(string pesquisa)
    {
        Items = await Service.Alunos(new SelectSearchParam(pesquisa, 20));
        return Items.Select(x => x.Id);
    }

    private int Value { get; set; }

    private void OnValueChanged(int id)
    {
        IdChanged.InvokeAsync(id);
        GetSelectedAsync(id);
    }

    private async Task GetSelectedAsync(int id)
    {
        var result = await AlunoApiService.Buscar(id);
        await OnSelected.InvokeAsync(result);
    }
}
