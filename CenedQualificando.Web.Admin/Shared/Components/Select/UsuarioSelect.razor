@using CenedQualificando.Domain.Models.ViewModels
@using CenedQualificando.Domain.Models.Base

@namespace CenedQualificando.Web.Admin.Shared.Components.Select

@inject CenedQualificando.Web.Admin.Services.ApiContracts.IComboEntidadeApiContract Service
@inject CenedQualificando.Web.Admin.Services.ApiContracts.IUsuarioApiContract UsuarioApiService

<MudAutocomplete T="SelectResult"
                 Label="@Label"
                 Value="@Selected"
                 ValueChanged="@OnValueChanged"
                 SearchFunc="@Search"
                 ToStringFunc="@(p => p == null ? null : p.Text)"
                 ResetValueOnEmptyText="false"
                 CoerceText="true"
                 Clearable="true"
                 Placeholder="Digite Nome do Usuário"
                 Variant="@Variant"
                 Margin="@(Dense ? Margin.Dense : Margin.Normal)"
                 Dense="@Dense"
                 MaxItems="20" 
                 DebounceInterval="800" />

@code{

    protected override async Task OnInitializedAsync()
    {
        if (Id > 0)
            await GetSelectedAsync(Id);
    }

    [Parameter] public int Id { get; set; }
    [Parameter] public EventCallback<int> IdChanged { get; set; }

    [Parameter] public EventCallback<UsuarioViewModel> OnSelected { get; set; }
    [Parameter] public string Label { get; set; } = "Usuário";
    [Parameter] public Variant Variant { get; set; } = Variant.Outlined;
    [Parameter] public bool Dense { get; set; } = false;

    private IEnumerable<SelectResult> Items { get; set; }
    private SelectResult Selected { get; set; }

    private async Task<IEnumerable<SelectResult>> Search(string pesquisa)
    {
        Items = await Service.Usuarios(new SelectSearchParam(pesquisa, 20, Id));
        return Items;
    }

    private async Task OnValueChanged(SelectResult value)
    {
        if (value != null)
        {
            var taskGetSelected = GetSelectedAsync(value.Id);
            var taskIdChangedInvoke = IdChanged.InvokeAsync(value.Id);
            await Task.WhenAll(taskGetSelected, taskIdChangedInvoke);
        }
    }

    private async Task GetSelectedAsync(int id)
    {
        var usuario = await UsuarioApiService.Buscar(id);

        Selected = new SelectResult 
        { 
            Id = usuario.Id, 
            Text = $"{usuario.Nome.ToUpper()}" 
        };

        await OnSelected.InvokeAsync(usuario);
    }
}