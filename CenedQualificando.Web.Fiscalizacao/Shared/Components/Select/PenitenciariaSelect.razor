@using CenedQualificando.Domain.Models.Filters
@using CenedQualificando.Domain.Models.ViewModels
@using CenedQualificando.Domain.Models.Base
@using CenedQualificando.Domain.Models.Enumerations
@using CenedQualificando.Web.Fiscalizacao.Services.ApiContracts

@namespace CenedQualificando.Web.Fiscalizacao.Shared.Components.Select

<MudAutocomplete T="SelectResult"
                 Label="@Label"
                 Value="@Selected"
                 ValueChanged="@OnValueChanged"
                 SearchFunc="@Search"
                 ToStringFunc="@(p => p == null ? null : p.Text)"
                 ResetValueOnEmptyText="false"
                 CoerceText="true"
                 Clearable="true"
                 Placeholder="Digite o Nome da Penitenciária"
                 Variant="@Variant"
                 Margin="@(Dense ? Margin.Dense : Margin.Normal)"
                 Dense="@Dense"
                 MaxItems="20" 
                 DebounceInterval="800" />

@code{

    [Inject] protected IComboEntidadeApiContract CombosApiService { get; set; }
    [Inject] protected IPenitenciariaApiContract PenitenciariaApiService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id > 0)
            await GetSelectedAsync(Id);
    }

    [Parameter] public int Id { get; set; }
    [Parameter] public EventCallback<int> IdChanged { get; set; }

    [Parameter] public UfEnum Uf { get => Filtro.Uf; set => Filtro.Uf = value; }

    [Parameter] public EventCallback<PenitenciariaViewModel> OnSelected { get; set; }
    [Parameter] public string Label { get; set; } = "Penitenciária";
    [Parameter] public Variant Variant { get; set; } = Variant.Outlined;
    [Parameter] public bool Dense { get; set; } = false;

    private IEnumerable<SelectResult> Items { get; set; }
    private SelectResult Selected { get; set; }
    private PenitenciariaFilter Filtro { get; set; } = new PenitenciariaFilter
    {
        Limit = 50,
        Page = 1
    };

    private async Task<IEnumerable<SelectResult>> Search(string pesquisa)
    {
        Filtro.Search = pesquisa;
        Items = await CombosApiService.Penitenciarias(Filtro);
        return Items;
    }

    private async Task OnValueChanged(SelectResult value)
    {
        if (value != null)
        {
            var taskGetSelected = GetSelectedAsync(value.Id);
            var taskIdChangedInvoke = IdChanged.InvokeAsync(value.Id);
            await Task.WhenAll(taskGetSelected, taskIdChangedInvoke);
        }
    }

    private async Task GetSelectedAsync(int id)
    {
        var penitenciaria = await PenitenciariaApiService.Buscar(id);

        Selected = new SelectResult 
        { 
            Id = penitenciaria.Id, 
            Text = $"{penitenciaria.Nome} | {((UfEnum)penitenciaria.Uf).EnumDescription()}" 
        };

        if (!Items.Any(m => m.Id == Selected.Id))
            Items.Prepend(Selected);

        await OnSelected.InvokeAsync(penitenciaria);
    }
}